Option[content] ::=
  content@value <Some>
  <None>;

NonEmptyList[content, separation] ::=
  content@head <Nil>
  content@head separation NonEmptyList[content, separation]@tail <Cons>;

List[content, separation] ::=
  Option[NonEmptyList[content, separation]]@value <>;

Empty ::= <>;

"a compilation unit"
@File ::=
  List[InstructionOrLabel, Empty]@instrlbls <>;

"a label"
Label ::=
  LABEL.0@value <Global>
  LOCAL.0@value <Local>;

InstructionOrLabel ::=
  Label@label COLON <Label>
  Instruction@instr <Instruction>;

"an instruction"
Instruction ::=
  REGISTER.0@dest EQ Expression@value <Assignment>
  Statement@stmt <Statement>;

"an expression"
Expression ::=
  ExprMonOp@op Arg@arg <Monadic>
  ExprBinOp@op Arg@left COMMA Arg@right <Diadic>;

"a statement"
Statement ::=
  StmtMonJmp@op JmpArg@arg <MonadicJump>
  StmtBinJmp@op JmpArg@left COMMA Arg@right <DiadicJump>
  StmtMonOp@op Arg@arg <Monadic>
  StmtBinOp@op Arg@left COMMA Arg@right <Diadic>;

"an instruction code"
ExprBinOp ::=
  ADD <Add>
  SUB <Sub>
  MUL <Mul>
  DIV <Div>
  MOD <Mod>
  AND <And>
  OR <Or>
  XOR <Xor>
  CMPEQ <CmpEq>
  CMPNEQ <CmpNeq>
  CMPLT <CmpLt>
  CMPLEQ <CmpLeq>
  CMPGT <CmpGt>
  CMPGEQ <CmpGeq>
  CMPAB <CmpAb>
  CMPAE <CmpAe>
  CMPBL <CmpBl>
  CMPBE <CmpBe>;

"an instruction code"
ExprMonOp ::=
  LOAD <Load>;

"an instruction code"
StmtMonOp ::=
  JO <Jo>;

"an instruction code"
StmtBinOp ::=
  STORE <Store>
  JZO <Jzo>
  JNZO <Jnzo>;

"an instruction code"
StmtBinJmp ::=
  JZ <Jz>
  JNZ <Jnz>;

"an instruction code"
StmtMonJmp ::=
  JMP <Jmp>;

"an argument"
Arg ::=
  REGISTER.0@value <Register>
  Calc@value <Immediate>;

JmpArg ::=
  Arg@arg <Arg>
  LABEL.0@value <Global>
  FORWARD.0@value <Forward>
  BACKWARD.0@value <Backward>;

"an immediate"
Calc ::=
  INT.0@value <Literal>
  LPAR Calc@this RPAR <Through>
  (left-assoc) Calc@left MulDiv@op Calc@right <BinOp>
  (left-assoc) Calc@left AddSub@op Calc@right <BinOp>;

"an operator"
MulDiv ::=
  ASTERISK <Mul>
  SLASH <Div>;

"an operator"
AddSub ::=
  PLUS <Add>
  MINUS <Sub>;
