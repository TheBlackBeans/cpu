; r0 -- 0
; r2 -- # seconds (unsigned)
; r3 -- # minutes (unsigned)
; r4 -- # hours (unsigned)
; r5 -- # days (unsigned)
; r6 -- # month (unsigned)
; r7 -- # year (signed?)
; r8 -- scratch
; r11 -- # days in February of the current year: r11 = 29 iff r14 = 4 and (r13 < 25 or r12 = 4), r11 = 28 otherwise  (during year initialization, scratch)
; r12 -- # 100-years until r7 = 0 mod 400 (excluding current)
; r13 -- # 4-years until r7 = 0 mod 100 (excluding current)
; r14 -- # years until r7 = 0 mod 4 (excluding current)
; r15 -- # days in the current month

; out/vm -f out/clock -n <ncycles> -r 0 <r2> <r3> <r4> <r5> <r6> <r7> <r8> 0 0 <r11> <r12> <r13> <r14> <r15> <ip> -q --ifmt "%x%r2 %r3 %r4 %r5 %r6 %r7 %r8 %r11 %r12 %r13 %r14 %r15 %ip | %insn"$'\n'
; out/vm -f out/clock -n <ncycles> -r 0 <r2> <r3> <r4> <r5> <r6> <r7> <r8> 0 0 <r11> <r12> <r13> <r14> <r15> <ip> -q --ifmt "%d%r5/%r6/%r7 %r4:%r3:%r2 [%r8 %r11;%r12,%r13,%r14 %r15; %ip | %insn]"$'\n'

_init:
	; Read year
	jmp 0f
	
read_years: ; Next binary digit
	r8 = cmpae r14, 4
	r11 = mul r8, 4
	r14 = sub r14, r11
	r13 = add r13, r13
	r13 = add r13, r8
	r8 = cmpae r13, 25
	r11 = mul r8, 25
	r13 = sub r13, r11
	r12 = add r12, r12
	r12 = add r12, r8
	r8 = cmpae r12, 4
	r11 = mul r8, 4
	r12 = sub r12, r11
0:
	port 5 = r7
read_years_00:
	r8 = port 0
	jnz read_years_01, r8
	r8 = port 1
	jz read_years_00, r8
	
read_years_10:
	r8 = port 0
	jnz read_years_11, r8
	r8 = port 1
	jnz read_years_10, r8
	r7 = add r7, r7
	r7 = add r7, 1
	; 2n + 1 mod 4 -> double, add 1, compare once to 4
	; If one, remove 4, and add 1 to the next, and so on (and we know for sure we are not overflowing above 4: the max possible value is 7)
	; That way, r12,r13,r14 are always in sync with r7
	r14 = add r14, r14
	r14 = add r14, 1
	jmp read_years
	
read_years_01:
	r8 = port 1
	jnz read_years_11, r8
	r8 = port 0
	jnz read_years_01, r8
	r7 = add r7, r7
	r14 = add r14, r14
	jmp read_years
	
read_years_11:
	r8 = port 1
	jnz read_years_11, r8
	r8 = port 0
	jnz read_years_11, r8
	
	; Now compute r11
	; First, setup for next year
	r12 = sub 4, r12
	r13 = sub 25, r13
	r14 = sub 4, r14
	; Next, do the computation: r11 = 29 if r14 = 4 and r13 < 25, or r14 = 4 and r13 = 25 and r12 = 4
	; Equivalently, r11 = 28 + ((r14 = 4) and ((r13 < 25) or (r12 = 4)))
	r8 = cmpeq r12, 4
	r11 = cmpne r13, 25
	r11 = or r11, r8 ; r12 = 4 || r13 < 25
	r8 = cmpeq r14, 4
	r8 = and r8, r11
	r11 = add 28, r8
	
	; Read month
read_months:
	port 4 = r6
read_months_00:
	r8 = port 0
	jnz read_months_01, r8
	r8 = port 1
	jz read_months_00, r8
	
read_months_10:
	r8 = port 0
	jnz read_months_11, r8
	r8 = port 1
	jnz read_months_10, r8
	r6 = add r6, r6
	r6 = add r6, 1
	r8 = cmpae r6, 12
	jz 0f, r8
	r6 = 0
0:
	jmp read_months
	
read_months_01:
	r8 = port 1
	jnz read_months_11, r8
	r8 = port 0
	jnz read_months_01, r8
	r6 = add r6, r6
	r8 = cmpae r6, 12
	jz 0f, r8
	r6 = 0
0:
	jmp read_months
	
read_months_11:
	r8 = port 1
	jnz read_months_11, r8
	r8 = port 0
	jnz read_months_11, r8
	
	; Compute number of days in the current month
	r8 = cmpeq r6, 1 ; Feb
	jz 2f, r8
	r15 = r11
	jmp 1f
2:
	r8 = cmpae r6, 7 ; Aug, Sep, Oct, Nov, Dec
	r8 = sub r6, r8
	r8 = and r8, 1   ; Apr, Jun, Sep, Nov
	r15 = sub 31, r8
1:
	; Receive number of days
read_days:
	port 3 = r5
read_days_00:
	r8 = port 0
	jnz read_days_01, r8
	r8 = port 1
	jz read_days_00, r8
	
read_days_10:
	r8 = port 0
	jnz read_days_11, r8
	r8 = port 1
	jnz read_days_10, r8
	r5 = add r5, r5
	r5 = add r5, 1
	r8 = cmpae r5, r15
	jz 0f, r8
	r5 = 0
0:
	jmp read_days
	
read_days_01:
	r8 = port 1
	jnz read_days_11, r8
	r8 = port 0
	jnz read_days_01, r8
	r5 = add r5, r5
	r8 = cmpae r5, r15
	jz 0f, r8
	r5 = 0
0:
	jmp read_days
	
read_days_11:
	r8 = port 1
	jnz read_days_11, r8
	r8 = port 0
	jnz read_days_11, r8
	
	; Read hour
read_hour:
	r8 = cmpae r4, 24
	jz 0f, r8
	r4 = 0
0:
	port 2 = r4
read_hour_00:
	r8 = port 0
	jnz read_hour_01, r8
	r8 = port 1
	jz read_hour_00, r8
	
read_hour_10:
	r8 = port 0
	jnz read_hour_11, r8
	r8 = port 1
	jnz read_hour_10, r8
	r4 = add r4, r4
	r4 = add r4, 1
	jmp read_hour
	
read_hour_01:
	r8 = port 1
	jnz read_hour_11, r8
	r8 = port 0
	jnz read_hour_01, r8
	r4 = add r4, r4
	jmp read_hour
	
read_hour_11:
	r8 = port 1
	jnz read_hour_11, r8
	r8 = port 0
	jnz read_hour_11, r8
	
	; Read minutes
read_mins:
	r8 = cmpae r3, 60
	jz 0f, r8
	r3 = 0
0:
	port 1 = r3
read_mins_00:
	r8 = port 0
	jnz read_mins_01, r8
	r8 = port 1
	jz read_mins_00, r8
	
read_mins_10:
	r8 = port 0
	jnz read_mins_11, r8
	r8 = port 1
	jnz read_mins_10, r8
	r3 = add r3, r3
	r3 = add r3, 1
	jmp read_mins
	
read_mins_01:
	r8 = port 1
	jnz read_mins_11, r8
	r8 = port 0
	jnz read_mins_01, r8
	r3 = add r3, r3
	jmp read_mins
	
read_mins_11:
	r8 = port 1
	jnz read_mins_11, r8
	r8 = port 0
	jnz read_mins_11, r8
	
	; Read seconds
read_secs:
	r8 = cmpae r2, 60
	jz 0f, r8
	r2 = 0
0:
	port 0 = r2
read_secs_00:
	r8 = port 0
	jnz read_secs_01, r8
	r8 = port 1
	jz read_secs_00, r8
	
read_secs_10:
	r8 = port 0
	jnz read_secs_11, r8
	r8 = port 1
	jnz read_secs_10, r8
	r2 = add r2, r2
	r2 = add r2, 1
	jmp read_secs
	
read_secs_01:
	r8 = port 1
	jnz read_secs_11, r8
	r8 = port 0
	jnz read_secs_01, r8
	r2 = add r2, r2
	jmp read_secs
	
read_secs_11:
	; We don't need to wait for the user to release the buttons
	;r8 = port 1
	;jnz read_secs_11, r8
	;r8 = port 0
	;jnz read_secs_11, r8
	
	jmp start ; Finished initialization
	
not_bis:
	r11 = 28
start:
	r2 = add r2, 1
	port 0 = r2
	r8 = cmpae r2, 60
	jz start, r8
	
	; We have passed 60 second
	r2 = sub r2, 60
	port 0 = r2
	r3 = add r3, 1
	port 1 = r3
	r8 = cmpae r3, 60
	jz start, r8
	
	; We have passed 60 minutes
	r3 = sub r3, 60
	port 1 = r3
	r4 = add r4, 1
	port 2 = r4
	r8 = cmpae r4, 24
	jz start, r8
	
	; We have passed 24 hours
	r4 = sub r4, 24
	port 2 = r4
	r5 = add r5, 1
	port 3 = r5
	r8 = cmpae r5, r15
	jz start, r8
	
	; We have passed <r15> days
	r5 = sub r5, r15
	port 3 = r5
	r6 = add r6, 1
	port 4 = r6
	r8 = cmpeq r6, 1 ; Jan -> Feb
	jnz 2f, r8
	r8 = cmpae r6, 12 ; Dec -> Jan
	jnz 1f, r8
	r8 = cmpae r6, 8 ; Jul -> Aug, Aug -> Sep, Sep -> Oct, Oct -> Nov, Nov -> Dec
	r8 = sub r6, r8
	r8 = and r8, 1
	r15 = sub 31, r8
	jmp start
	; It seems doing r15 = 31 + 30 - r15 may be the most optimal in term of number of operations though
2:
	; Jan -> Feb
	r15 = r11
	jmp start
1:
	; We have passed 12 months
	r6 = sub r6, 12
	port 4 = r6
	r7 = add r7, 1
	port 5 = r7
	r15 = 31
compute_r14:
	; Now compute the number of days in February
	r14 = sub r14, 1
	jnz not_bis, r14
	r14 = 4
	r13 = sub r13, 1
	jnz bis, r13
	r13 = 25
	r12 = sub r12, 1
	jnz not_bis, r12
	r12 = 4
bis:
	r11 = 29
	jmp start
